<?phprequire_once 'AbstractPdoManager.class.php';class PdoRentalManager extends AbstractPdoManager{	public function findAllRentals() {			$results = array();		$query = $this->pdo->prepare("		SELECT *		FROM reservation		");				$query->execute();		while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findRentalsByStatus($status) {			$results = array();		$query = $this->pdo->prepare("		SELECT *		FROM reservation WHERE status = :status		");				$query->bindValue(':status', $status);				$query->execute();		while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findRentalsByPlane($idPlane) {			$results = array();		$query = $this->pdo->prepare("		SELECT *		FROM reservation WHERE idPlane = :idPlane		");				$query->bindValue(':idPlane', $idPlane);				$query->execute();		while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}	public function findRentalsByDate($date) {			$results = array();		$query = $this->pdo->prepare("		SELECT *		FROM reservation WHERE dateReservation = :date		");				$query->bindValue(':date', $date);				$query->execute();		while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}			public function findRentalsByPilot($FInum) {			$results = array();		$query = $this->pdo->prepare("		SELECT *		FROM reservation WHERE FInumber = :FInum		");				$query->bindValue(':FInum', $FInum);				$query->execute();		while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findRentalsByIdMember($idMember) {			$results = array();		$query = $this->pdo->prepare("		SELECT *		FROM reservation WHERE idMember = :idMember		");				$query->bindValue(':idMember', $idMember);				$query->execute();		while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findMyUndoneFlights($idMember) {			$results = array();				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE idMember = :idMember && (status = :status || status = :statusBis)			");				}else {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE (idMember = :idMember || FInumber = :FInum) && (status = :status || status = :statusBis)			");						$query->bindValue(':FInum', $_SESSION['user']->getFInumber());		}				$query->bindValue(':idMember', $idMember);		$query->bindValue(':status', 'pending');		$query->bindValue(':statusBis', 'accepted');				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;						}		public function findMyPastFlights($idMember) {			$results = array();				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE idMember = :idMember && status = :status 			");					}else {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE (idMember = :idMember || FInumber = :FInum) && status = :status 			");					$query->bindValue(':FInum', $_SESSION['user']->getFInumber());		}				$query->bindValue(':idMember', $idMember);		$query->bindValue(':status', 'done');				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;		}		public function findMyUndoneByPlane($idPlane) {			$results = array();				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE idMember = :idMember  && (status = :status || status = :statusBis) && idPlane = :idPlane			");					}else {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE (idMember = :idMember || FInumber = :FInum) && (status = :status || status = :statusBis) && idPlane = :idPlane 			");					$query->bindValue(':FInum', $_SESSION['user']->getFInumber());				}				$query->bindValue(':idMember', $_SESSION['user']->getIdMember());		$query->bindValue(':status', 'pending');		$query->bindValue(':statusBis', 'accepted');		$query->bindValue(':idPlane', $idPlane);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findMyUndoneByDate($date) {			$results = array();				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE idMember = :idMember  && (status = :status || status = :statusBis) && dateReservation = :dReserv			");					}else {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE (idMember = :idMember || FInumber = :FInum) && (status = :status || status = :statusBis) && dateReservation = :dReserv 			");					$query->bindValue(':FInum', $_SESSION['user']->getFInumber());				}				$query->bindValue(':idMember', $_SESSION['user']->getIdMember());		$query->bindValue(':status', 'pending');		$query->bindValue(':statusBis', 'accepted');		$query->bindValue(':dReserv', $date);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findMyUndoneByPilot($FInum) {			$results = array();				$query = $this->pdo->prepare("		SELECT *		FROM reservation WHERE idMember = :idMember  && (status = :status || status = :statusBis) && FInumber = :FInum		");				$query->bindValue(':idMember', $_SESSION['user']->getIdMember());		$query->bindValue(':status', 'pending');		$query->bindValue(':statusBis', 'accepted');		$query->bindValue(':FInum', $FInum);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findMyDoneByPlane($idPlane) {			$results = array();				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE idMember = :idMember  && status = :status && idPlane = :idPlane			");					}else {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE (idMember = :idMember || FInumber = :FInum) && status = :status && idPlane = :idPlane			");					$query->bindValue(':FInum', $_SESSION['user']->getFInumber());				}				$query->bindValue(':idMember', $_SESSION['user']->getIdMember());		$query->bindValue(':status', 'done');		$query->bindValue(':idPlane', $idPlane);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findMyDoneByDate($date) {				$results = array();				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE idMember = :idMember  && status = :status && dateReservation = :dReserv			");					}else {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE (idMember = :idMember || FInumber = :FInum) && status = :status && dateReservation = :dReserv			");					$query->bindValue(':FInum', $_SESSION['user']->getFInumber());				}				$query->bindValue(':idMember', $_SESSION['user']->getIdMember());		$query->bindValue(':status', 'done');		$query->bindValue(':dReserv', $date);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findMyDoneByPilot($FInum) {			$results = array();				$query = $this->pdo->prepare("		SELECT *		FROM reservation WHERE idMember = :idMember  && status = :status && FInumber = :FInum		");				$query->bindValue(':idMember', $_SESSION['user']->getIdMember());		$query->bindValue(':status', 'done');		$query->bindValue(':FInum', $FInum);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function findMyUndoneByStatus($status) {			$results = array();				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE idMember = :idMember  && status = :status			");					}else {					$query = $this->pdo->prepare("			SELECT *			FROM reservation WHERE (idMember = :idMember || FInumber = :FInum) && status = :status			");					$query->bindValue(':FInum', $_SESSION['user']->getFInumber());				}				$query->bindValue(':idMember', $_SESSION['user']->getIdMember());		$query->bindValue(':status', $status);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Reservation($result->idReservation, $result->idMember, $result->idPlane, $result->dateReservation, $result->FInumber, $result->dureeReservation, $result->status);		}		$query->closeCursor();		return $results;			}		public function addRental($idPlane, $date, $dTime, $aTime, $dAirfield, $aAirfield, $pilot) {			$duree =  date('H:i:s' ,(strtotime($aTime) - strtotime($dTime)));		$results = array();		$results2 = array();		$results3 = array();		$resultsA = array();		list($fName, $lName) = explode(" ", $pilot, 2); 				if(!isset($pilotManager)) $pilotManager = ManagerFactory::getMembersManager();		$pilotsList = $pilotManager->findInstructorByNames($fName, $lName);						foreach($pilotsList as $pilot1) {			$FInum = $pilot1->getFInumber();		}				if($_SESSION['user']->getTypeMember() == "member") {					$query = $this->pdo->prepare("			SELECT *			FROM logbook WHERE idMember = :idM && flightDate = :date && (departureTime <= :aTime && arrivalTime >= :dTime)			");						$query->bindValue(':idM', $_SESSION['user']->getIdMember());			$query->bindValue(':date', $date);			$query->bindValue(':dTime', $dTime);			$query->bindValue(':aTime', $aTime);						$query->execute();						while($result = $query->fetch(PDO::FETCH_OBJ)) {				$results[] = new Logbook($result->idMember, $result->flightDate, $result->typePlane, $result->idPlane, $result->departureAirfield, $result->departureTime, $result->arrivalAirfield, $result->arrivalTime, $result->PICName, $result->FInumber, $result->dualTimeReceived, $result->flightTimePIC, $result->totalFlightDuration);			}						$query->closeCursor();						$count = 0;						foreach($results as $logbook) {								$count = $count + 1;							}						if($count != 0) return "<style type='text/css'> #addResp { color: red; }</style>You already have a flight for these hours.";			else {							$query2 = $this->pdo->prepare("				SELECT *				FROM logbook WHERE (FInumber = :FInum || PICName = :picN) && flightDate = :date && (departureTime <= :aTime && arrivalTime >= :dTime)				");								$query2->bindValue(':FInum', $FInum);				$query2->bindValue(':picN', $pilot);				$query2->bindValue(':date', $date);				$query2->bindValue(':dTime', $dTime);				$query2->bindValue(':aTime', $aTime);								$query2->execute();								while($result2 = $query2->fetch(PDO::FETCH_OBJ)) {					$results2[] = new Logbook($result2->idMember, $result2->flightDate, $result2->typePlane, $result2->idPlane, $result2->departureAirfield, $result2->departureTime, $result2->arrivalAirfield, $result2->arrivalTime, $result2->PICName, $result2->FInumber, $result2->dualTimeReceived, $result2->flightTimePIC, $result2->totalFlightDuration);				}								$query2->closeCursor();				$count2 = 0;								foreach($results2 as $logbook2) {					$count2 = $count2 + 1;				}								if($count2 != 0) return "<style type='text/css'> #addResp { color: red; }</style>The instructor already have a flight for these hours.";				else {									$query3 = $this->pdo->prepare("					SELECT *					FROM journeylog WHERE idPlane = :idP && flightDate = :date && (departureTime <= :aTime && arrivalTime >= :dTime)					");										$query3->bindValue(':idP', $idPlane);					$query3->bindValue(':date', $date);					$query3->bindValue(':dTime', $dTime);					$query3->bindValue(':aTime', $aTime);										$query3->execute();										while($result3 = $query3->fetch(PDO::FETCH_OBJ)) {						$results3[] = new JourneyLog($result3->idReservation, $result3->flightDate, $result3->departureAirfield, $result3->departureTime, $result3->arrivalAirfield, $result3->arrivalTime, $result3->flightDuration, $result3->idPlane);					}										$query3->closeCursor();					$count3 = 0;										foreach($results3 as $journeylog) {						$count3 = $count3 + 1;					}										if($count3 != 0) return "<style type='text/css'> #addResp { color: red; }</style>The plane isn't available for these hours";					else {												$query4 = "INSERT INTO reservation (idMember, idPlane, dateReservation, FInumber, dureeReservation, status)						VALUES (:idM, :idP, :dateReserv, :FInum, :dureeReserv, :status)";												$statement = $this->pdo->prepare($query4);												$statement->bindValue(':idM', $_SESSION['user']->getIdMember());						$statement->bindValue(':idP', $idPlane);						$statement->bindValue(':dateReserv', $date);						$statement->bindValue(':FInum', $FInum);						$statement->bindValue(':dureeReserv', $duree);						$statement->bindValue(':status', 'pending');												$result4 = $statement->execute();												$queryA = $this->pdo->prepare("						SELECT *						FROM reservation 						WHERE idMember = :idM && idPlane = :idP && dateReservation = :dateReserv && FInumber = :FInum && dureeReservation = :dureeReserv && status = :status						");												$queryA->bindValue(':idM', $_SESSION['user']->getIdMember());						$queryA->bindValue(':idP', $idPlane);						$queryA->bindValue(':dateReserv', $date);						$queryA->bindValue(':FInum', $FInum);						$queryA->bindValue(':dureeReserv', $duree);						$queryA->bindValue(':status', 'pending');												$queryA->execute();												while($resultA = $queryA->fetch(PDO::FETCH_OBJ)) {							$resultsA[] = new Reservation($resultA->idReservation, $resultA->idMember, $resultA->idPlane, $resultA->dateReservation, $resultA->FInumber, $resultA->dureeReservation, $resultA->status);						}								$queryA->closeCursor();												foreach($resultsA as $resultA) {							$idReserv = $resultA->getIdReservation();						}																		if($result4) {							if(!isset($rentalManager)) $rentalManager = ManagerFactory::getRentalManager();							$addToLogbook = $rentalManager->addRentalToLogbook($date, $idPlane, $dAirfield, $dTime, $aAirfield, $aTime, $pilot, $FInum);														if($addToLogbook == true)  $addToJourneyLog = $rentalManager->addRentalToJourneyLog($idReserv, $date, $dAirfield, $dTime, $aAirfield, $aTime, $idPlane);														$modifyAccBal = $rentalManager->modifyAccountBalance($dTime, $aTime, $idPlane);						}						if($result4 && $addToLogbook == true && $addToJourneyLog == true && $modifyAccBal == true) return "<style type='text/css'> #addResp { color: green; }</style>Your rental has been made.";						else return $modifyAccBal;					}				}			}					}else {					if($_SESSION['user']->getFINumber() == 0) {							$query = $this->pdo->prepare("				SELECT *				FROM logbook WHERE (idMember = :idM || PICName = :picN) && flightDate = :date && (departureTime <= :aTime && arrivalTime >= :dTime)				");							}else {							$query = $this->pdo->prepare("				SELECT *				FROM logbook WHERE (idMember = :idM || PICName = :picN || FInumber = :FInum) && flightDate = :date && (departureTime <= :aTime && arrivalTime >= :dTime)				");								$query->bindValue(':FInum', $FInum);			}						$query->bindValue(':idM', $_SESSION['user']->getIdMember());			$query->bindValue(':date', $date);			$query->bindValue(':dTime', $dTime);			$query->bindValue(':aTime', $aTime);			$query->bindValue(':picN', $pilot);						$query->execute();						while($result = $query->fetch(PDO::FETCH_OBJ)) {				$results[] = new Logbook($result->idMember, $result->flightDate, $result->typePlane, $result->idPlane, $result->departureAirfield, $result->departureTime, $result->arrivalAirfield, $result->arrivalTime, $result->PICName, $result->FInumber, $result->dualTimeReceived, $result->flightTimePIC, $result->totalFlightDuration);			}						$query->closeCursor();			$count = 0;						foreach($results as $logbook) {				$count = $count + 1;			}						if($count != 0) return "<style type='text/css'> #addResp { color: red; }</style>You already have a flight for these hours.";			else {					$query3 = $this->pdo->prepare("					SELECT *					FROM journeylog WHERE idPlane = :idP && flightDate = :date && (departureTime <= :aTime && arrivalTime >= :dTime)					");										$query3->bindValue(':idP', $idPlane);					$query3->bindValue(':date', $date);					$query3->bindValue(':dTime', $dTime);					$query3->bindValue(':aTime', $aTime);										$query3->execute();										while($result3 = $query3->fetch(PDO::FETCH_OBJ)) {						$results3[] = new JourneyLog($result3->idReservation, $result3->flightDate, $result3->departureAirfield, $result3->departureTime, $result3->arrivalAirfield, $result3->arrivalTime, $result3->flightDuration, $result3->idPlane);					}										$query3->closeCursor();					$count3 = 0;										foreach($results3 as $journeylog) {						$count3 = $count3 + 1;					}										if($count3 != 0) return "<style type='text/css'> #addResp { color: red; }</style>The plane isn't available for these hours";					else {												$query4 = "INSERT INTO reservation (idMember, idPlane, dateReservation, FInumber, dureeReservation, status)						VALUES (:idM, :idP, :dateReserv, :FInum, :dureeReserv, :status)";												$statement = $this->pdo->prepare($query4);												$statement->bindValue(':idM', $_SESSION['user']->getIdMember());						$statement->bindValue(':idP', $idPlane);						$statement->bindValue(':dateReserv', $date);						$statement->bindValue(':FInum', $FInum);						$statement->bindValue(':dureeReserv', $duree);						$statement->bindValue(':status', 'accepted');												$result4 = $statement->execute();												$queryA = $this->pdo->prepare("						SELECT *						FROM reservation 						WHERE idMember = :idM && idPlane = :idP && dateReservation = :dateReserv && FInumber = :FInum && dureeReservation = :dureeReserv && status = :status						");												$queryA->bindValue(':idM', $_SESSION['user']->getIdMember());						$queryA->bindValue(':idP', $idPlane);						$queryA->bindValue(':dateReserv', $date);						$queryA->bindValue(':FInum', $FInum);						$queryA->bindValue(':dureeReserv', $duree);						$queryA->bindValue(':status', 'accepted');												$queryA->execute();												while($resultA = $queryA->fetch(PDO::FETCH_OBJ)) {							$resultsA[] = new Reservation($resultA->idReservation, $resultA->idMember, $resultA->idPlane, $resultA->dateReservation, $resultA->FInumber, $resultA->dureeReservation, $resultA->status);						}								$queryA->closeCursor();												foreach($resultsA as $resultA) {							$idReserv = $resultA->getIdReservation();						}												if($result4) {							if(!isset($rentalManager)) $rentalManager = ManagerFactory::getRentalManager();							$addToLogbook = $rentalManager->addRentalToLogbook($date, $idPlane, $dAirfield, $dTime, $aAirfield, $aTime, $pilot, $FInum);														if($addToLogbook == true)  $addToJourneyLog = $rentalManager->addRentalToJourneyLog($idReserv, $date, $dAirfield, $dTime, $aAirfield, $aTime, $idPlane);														$modifyAccBal = $rentalManager->modifyAccountBalance($dTime, $aTime, $idPlane);						}						if($result4 && $addToLogbook == true && $addToJourneyLog == true && $modifyAccBal == true) return "<style type='text/css'> #addResp { color: green; }</style>Your rental has been made.";						else return "<style type='text/css'> #addResp { color: red; }</style>Error when creating the rental.";					}			}				}	}		public function addRentalToLogbook($date, $idPlane, $dAirfield, $dTime, $aAirfield, $aTime, $picN, $FInum) {			$results = array();		$duree =  date('H:i:s' ,(strtotime($aTime) - strtotime($dTime)));				$query = $this->pdo->prepare("		SELECT *		FROM planes WHERE idPlane = :idP		");				$query->bindValue(':idP', $idPlane);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Planes($result->typePlane, $result->idPlane, $result->locationCost, $result->availability);		}		$query->closeCursor();		foreach($results as $plane) {			$typePlane = $plane->getTypePlane();		}				if(isset($typePlane)) {					$query2 = "INSERT INTO logbook (idMember, flightDate, typePlane, idPlane, departureAirfield, departureTime, arrivalAirfield, arrivalTime, PICName, FInumber, dualTimeReceived, flightTimePIC, totalFLightDuration)			VALUES (:idM, :date, :tPlane, :idP, :dAir, :dTime, :aAir, :aTime, :picN, :FInum, :dTR, :fTPIC, :tFD)";									$statement = $this->pdo->prepare($query2);									$statement->bindValue(':idM', $_SESSION['user']->getIdMember());			$statement->bindValue(':date', $date);			$statement->bindValue(':tPlane', $typePlane);			$statement->bindValue(':idP', $idPlane);			$statement->bindValue(':dAir', $dAirfield);			$statement->bindValue(':dTime', $dTime);			$statement->bindValue(':aAir', $aAirfield);			$statement->bindValue(':aTime', $aTime);			$statement->bindValue(':picN', $picN);			$statement->bindValue(':FInum', $FInum);			if($_SESSION['user']->getTypeMember() == "member") {				$statement->bindValue(':dTR', $duree);			}else $statement->bindValue(':dTR', '00:00:00');			if($_SESSION['user']->getTypeMember() == "member") {				$statement->bindValue(':fTPIC', '00:00:00');			}else $statement->bindValue(':fTPIC', $duree);			$statement->bindValue(':tFD', $duree);						$result2 = $statement->execute();									if($result2) return true;			else return false;				}			}		public function addRentalToJourneyLog($idRental, $date, $dAir, $dTime, $aAir, $aTime, $idPlane) {				$duree =  date('H:i:s' ,(strtotime($aTime) - strtotime($dTime)));				$query = "INSERT INTO journeylog (idReservation, flightDate, departureAirfield, departureTime, arrivalAirfield, arrivalTime, flightDuration, idPlane)		VALUES (:idR, :fDate, :dAir, :dTime, :aAir, :aTime, :fDuration, :idP)";				$statement = $this->pdo->prepare($query);				$statement->bindValue(':idR', $idRental);		$statement->bindValue(':fDate', $date);		$statement->bindValue(':dAir', $dAir);		$statement->bindValue(':dTime', $dTime);		$statement->bindValue(':aAir', $aAir);		$statement->bindValue(':aTime', $aTime);		$statement->bindValue(':fDuration', $duree);		$statement->bindValue(':idP', $idPlane);				$result = $statement->execute();				if($result) return true;		else return false;			}		public function modifyAccountBalance($dTime, $aTime, $idPlane) {				if(!isset($rentalManager)) $rentalManager = ManagerFactory::getRentalManager();		$creditRemaining = $rentalManager->checkIfIHaveEnoughMoney($dTime, $aTime, $idPlane);				if(!isset($memberManager)) $memberManager = ManagerFactory::getMembersManager();		if(isset($creditRemaining)) {			$memberManager->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);			$memberManager->pdo->beginTransaction();						try {					$query = $memberManager->pdo->prepare("					UPDATE members SET accBalance=:newAccBalance					WHERE idMember=:idM					");													$query->bindValue(':newAccBalance', $creditRemaining);					$query->bindValue(':idM', $_SESSION['user']->getIdMember());													if($query->execute()) {															$query->closeCursor();						$memberManager->pdo->commit();						$result = true;									}												}catch(Exception $e) {$memberManager->pdo->rollBack(); echo "Error".$e->getMessage(); }							if($_SESSION['user']->getTypeMember() == "pilot") {							if(!isset($memberManager2)) $memberManager2 = ManagerFactory::getMembersManager();				$memberManager2->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);				$memberManager2->pdo->beginTransaction();				try {					$query2 = $memberManager2->pdo->prepare("					UPDATE pilots SET accBalance=:newAccBalance					WHERE idMember=:idM					");													$query2->bindValue(':newAccBalance', $creditRemaining);					$query2->bindValue(':idM', $_SESSION['user']->getIdMember());													if($query2->execute()) {															$query2->closeCursor();						$memberManager2->pdo->commit();						$result1 = true;										}												}catch(Exception $e) {$memberManager2->pdo->rollBack(); echo "Error".$e->getMessage(); }							}						if($_SESSION['user']->getIsAdmin() == 1) {							if(!isset($memberManager3)) $memberManager3 = ManagerFactory::getMembersManager();				$memberManager3->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);				$memberManager3->pdo->beginTransaction();				try {					$query3 = $memberManager3->pdo->prepare("					UPDATE staff SET accBalance=:newAccBalance					WHERE idMember=:idM					");													$query3->bindValue(':newAccBalance', $creditRemaining);					$query3->bindValue(':idM', $_SESSION['user']->getIdMember());													if($query3->execute()) {															$query3->closeCursor();						$memberManager3->pdo->commit();						$result2 = true;										}												}catch(Exception $e) {$memberManager3->pdo->rollBack(); echo "Error".$e->getMessage(); }									}					}				if(isset($result)) {			if($result == true) {				if(isset($result1)) {					if($result1 == true) {						if(isset($result2)) {							if($result2 == true) {								return true;							}else return false;						}else return true;					}else return false;				}else return true;			}else return false;		}	}		public function checkIfIHaveEnoughMoney($dTime, $aTime, $idPlane) {			$results = array();		$results = array();				$duree =  (strtotime($aTime) - strtotime($dTime));				$query = $this->pdo->prepare("		SELECT *		FROM planes WHERE idPlane = :idP		");				$query->bindValue(':idP', $idPlane);				$query->execute();				while($result = $query->fetch(PDO::FETCH_OBJ)) {			$results[] = new Planes($result->typePlane, $result->idPlane, $result->locationCost, $result->availability);		}		$query->closeCursor();		foreach($results as $plane) {			$locationCost = ($plane->getLocationCost())/3600;		}				$initLocCost = number_format($duree*$locationCost, 2);				if($_SESSION['user']->getTypeMember() == "member") {			$locCost = number_format($initLocCost + ($duree * (20/3600)), 2);		}else $locCost = $initLocCost;				if(isset($locCost)) {					$query2 = $this->pdo->prepare("			SELECT *			FROM members WHERE idMember = :idM			");						$query2->bindValue(':idM', $_SESSION['user']->getIdMember());						$query2->execute();						while($result2 = $query2->fetch(PDO::FETCH_OBJ)) {				$results2[] = new Members($result2->firstName, $result2->lastName, $result2->idMember, $result2->address, $result2->gender, $result2->phone, $result2->email, $result2->password, $result2->typeMember, $result2->isAdmin, $result2->feesPaid, $result2->accBalance);			}						$query2->closeCursor();						foreach($results2 as $member) {							$accBal = $member->getAccBalance();						}						$creditRemaining = $accBal - $locCost;						return $creditRemaining;					}	}			public function updateStatus($idRental, $statusBis) {				$result = false;				if(!isset($rentalManager)) $rentalManager = ManagerFactory::getRentalManager();					$rentalManager->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);		$rentalManager->pdo->beginTransaction();					try {				$query = $rentalManager->pdo->prepare("				UPDATE reservation SET status=:newStatus				WHERE idReservation=:idR				");												$query->bindValue(':newStatus', $statusBis);				$query->bindValue(':idR', $idRental);												if($query->execute()) {														$query->closeCursor();					$rentalManager->pdo->commit();					$result = true;								}											}catch(Exception $e) {$rentalManager->pdo->rollBack(); echo "Error".$e->getMessage(); }					return $result;	}	}?>